{"version":3,"sources":["FormSampleOptions/FormSampleOptions.js","EnterSampleData/EnterSampleData.js","CalculationDisplay/CalculationDisplay.js","Util/Sampler.js","App/App.js","serviceWorker.js","index.js"],"names":["FormSampleOptions","props","stateProps","rp","renderProps","sp","react_default","a","createElement","onSubmit","handleOptionSubmit","className","type","name","value","rangeMin","onFocus","handleFocus","onChange","handleOptionChange","rangeMax","min","max","Math","sampleSize","EnterSampleData","sampleArr","onClick","handleBackOne","id","handleChangeInputsRequired","checked","requiredChecked","htmlFor","handleDataCalculation","map","item","key","handleDataInput","dataInput","required","CalculationDisplay","num","dataMean","Number","isInteger","abs","concat","toFixed","toPrecision","Sampler","size","len","rand","digitsArr","sampleDigits","i","push","length","floor","random","cutDigit","splice","steps","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","step","bind","assertThisInitialized","handleForwardOne","e","preventDefault","setState","currentRequired","data","objectSpread","keys","valsArr","values","count","filter","el","undefined","mean","reduce","acc","toString","target","appendState","val","select","index","indexOf","next","defineProperty","_this$state","src_FormSampleOptions_FormSampleOptions","src_EnterSampleData_EnterSampleData","src_CalculationDisplay_CalculationDisplay","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7f93453.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FormSampleOptions.css'\r\n\r\n\r\nconst FormSampleOptions = (props) => {\r\n\r\n  let {stateProps, renderProps} = props\r\n  let rp = renderProps\r\n  let sp = stateProps\r\n\r\n  return (\r\n    <form onSubmit={rp.handleOptionSubmit} className=\"form-sample-options\">\r\n      <div className=\"center-half\">\r\n        <label className=\"half-left\" >Min</label>\r\n        <input type=\"number\" name=\"rangeMin\"\r\n              className=\"half-right\"\r\n              value={sp.rangeMin}\r\n              onFocus={rp.handleFocus}\r\n              onChange={rp.handleOptionChange}/>\r\n      </div>\r\n      <div className=\"center-half\">\r\n        <label className=\"half-left\" >Max</label>\r\n        <input type=\"number\" name=\"rangeMax\"\r\n              className=\"half-right\"\r\n              value={sp.rangeMax}\r\n              onFocus={rp.handleFocus}\r\n              onChange={rp.handleOptionChange}/>\r\n      </div>    \r\n      <div className=\"center-half\">\r\n        <label className=\"half-left\" >Sample size</label>\r\n        <input type=\"number\" name=\"sampleSize\" \r\n              className=\"half-right\"\r\n              min='0' \r\n              max={Math.min(sp.rangeMax - sp.rangeMin, 1000)} \r\n              value={sp.sampleSize}\r\n              onFocus={rp.handleFocus}\r\n              onChange={rp.handleOptionChange}/>\r\n      </div>    \r\n      <input type=\"submit\"\r\n             className=\"btn-submit\"\r\n             value=\"Get Sample\"/>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default FormSampleOptions","import React from 'react'\r\nimport './EnterSampleData.css'\r\n\r\nconst EnterSampleData = (props) => {\r\n\r\n  let { stateProps, renderProps } = props\r\n  let sp = stateProps\r\n  let rp = renderProps\r\n  let sampleArr = sp.sampleArr\r\n\r\n  return (\r\n    <div className=\"output\">\r\n      <input type=\"button\" \r\n             value=\"New Sample\" \r\n             className=\"btn-back\"\r\n             onClick={rp.handleBackOne}/>\r\n      <fieldset>\r\n        <input type=\"checkbox\" \r\n              name=\"getRequired\" \r\n              id=\"getRequired\"\r\n              value=\"All inputs required\"\r\n              onChange={rp.handleChangeInputsRequired}\r\n              checked={sp.requiredChecked}/>\r\n        <label htmlFor=\"getRequired\">\r\n          All inputs required\r\n        </label>\r\n      </fieldset>\r\n      <form onSubmit={rp.handleDataCalculation}>\r\n        <table>\r\n          <tbody>\r\n            {\r\n              sampleArr.map(item => {\r\n                let key = 'id' + item\r\n                return (\r\n                  <tr key={key}\r\n                      className=\"center\">\r\n                    <td className=\"data-sample-id\" >{item}</td>\r\n                    <td>\r\n                      <input type=\"number\" \r\n                                id={key}\r\n                                className=\"data-input\"\r\n                                onChange={rp.handleDataInput}\r\n                                onFocus={rp.handleFocus}\r\n                                value={sp.dataInput.key}\r\n                                required={sp.requiredChecked}/>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n        <input type='submit'\r\n               className=\"btn-calculate\"\r\n               value=\"Calculate\"\r\n                />\r\n      </form>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EnterSampleData","import React from 'react';\r\n// import './FormSampleOptions.css'\r\n\r\n\r\nconst CalculationDisplay = (props) => {\r\n\r\n  let { stateProps } = props\r\n  let sp = stateProps\r\n  // let rp = renderProps\r\n\r\n  function formatNumber(num) {\r\n    // num is 0\r\n    // num is whole\r\n    // num is decimal > 0\r\n    // num is decimal < 0\r\n\r\n    if (num === 0) {\r\n      return 0\r\n    } else if (Number.isInteger(num)) {\r\n      return num\r\n    } else if (Math.abs(num) > 1) {\r\n      return `${num.toFixed(2)} (2dp)`\r\n    } else if (Math.abs(num) < 1) {\r\n      return `${num.toPrecision(4)} (4sf)`\r\n    } else {\r\n      return 'There is an error. Please report to admin.'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        (sp.dataMean && typeof sp.dataMean === 'number' && (\r\n          <p>The mean is {formatNumber(sp.dataMean)}</p>\r\n        )) || (sp.dataMean && (\r\n          <p>Cannot calculate with given input</p>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CalculationDisplay","export default {\r\n  RangeSample: (min, max, size) => {\r\n    let len = 0\r\n    let rand = 0\r\n    let digitsArr = []\r\n    let sampleDigits = []\r\n\r\n    // make an array of digits min to max\r\n    for (let i = min; i <= max; i++) {\r\n      digitsArr.push(i)\r\n    }\r\n\r\n    len = digitsArr.length\r\n\r\n    // Cut digits from Array one-by-one\r\n    for (let i = 0; i < size; i++) {\r\n      // generate rand * len\r\n      rand = Math.floor(Math.random() * len)\r\n      // remove items from digits array\r\n      let cutDigit = digitsArr.splice(rand, 1)[0]\r\n      sampleDigits.push(cutDigit)\r\n      len--\r\n    }\r\n\r\n    return sampleDigits\r\n  }\r\n}","import React, { Component } from 'react';\nimport FormSampleOptions from '../FormSampleOptions/FormSampleOptions'\nimport EnterSampleData from '../EnterSampleData/EnterSampleData'\nimport CalculationDisplay from '../CalculationDisplay/CalculationDisplay'\nimport Sampler from '../Util/Sampler'\nimport './App.css';\n\n\nconst steps = [\n  'FormSampleOptions',\n  'EnterSampleData',\n  'DisplayStatistics'\n]\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      rangeMin: '',\n      rangeMax: '',\n      sampleSize: '',\n      sampleArr: [],\n      dataInput: {},\n      dataMean: '',\n      requiredChecked: true,\n      step: 'FormSampleOptions'\n    }\n\n    this.handleBackOne = this.handleBackOne.bind(this)\n    this.handleForwardOne = this.handleForwardOne.bind(this)\n    this.handleDataCalculation = this.handleDataCalculation.bind(this)\n    this.handleDataInput = this.handleDataInput.bind(this)\n    this.handleOptionChange = this.handleOptionChange.bind(this)\n    this.handleOptionSubmit = this.handleOptionSubmit.bind(this)\n    this.handleChangeInputsRequired = this.handleChangeInputsRequired.bind(this)\n  }\n\n  handleBackOne(e) {\n    if (e) e.preventDefault()\n    // let index = steps.indexOf(this.state.step)\n    // let prev = steps[index - 1]\n    this.setState({dataInput: {}})\n    this.setState({dataMean: null})\n    this.setState({step: 'FormSampleOptions'})\n  }\n\n  handleChangeInputsRequired(e) {\n    const currentRequired = this.state.requiredChecked\n    this.setState({requiredChecked: !currentRequired})\n  }\n\n  handleDataCalculation(e) {\n    e.preventDefault()\n    const data = {...this.state.dataInput}\n    let keys = Object.keys(data)\n    let valsArr = Object.values(data)\n    valsArr = valsArr.filter(el => {\n      return el !== undefined\n    })\n    const count = valsArr.length\n\n    let sum = keys.reduce((acc, key) => {\n      if (data[key] === undefined) {\n        return acc\n      }\n      return acc + Number(data[key])\n    }, 0)\n    let mean = sum / count\n    if (typeof mean === 'number' && mean.toString() !== 'NaN') {\n      this.setState({dataMean: mean})\n    } else {\n      this.setState({dataMean: 'Calculation Error'})\n    }\n    this.setState({step: 'showCalculation'})\n  }\n\n  handleDataInput(e) {\n    e.preventDefault()\n    const id = e.target.id\n    const appendState = this.state.dataInput\n    let val = e.target.value\n    if (val === '') {\n      val = undefined\n    }\n\n    appendState[id] = val\n    this.setState({dataInput: appendState})\n  }\n\n  handleFocus(e) {\n    e.preventDefault()\n    e.target.select()\n  }\n\n  handleForwardOne() {\n    let step = this.state.step\n    let index = steps.indexOf(step)\n    let next = steps[index + 1]\n    next && this.setState({step: next})\n  }\n  \n  handleOptionChange(e) {\n    e.preventDefault()\n    const key = e.target.name\n    const value = Number(e.target.value)\n    this.setState({[key]: value})\n  }\n\n  handleOptionSubmit(e) {\n    e.preventDefault()\n    const { rangeMin, rangeMax, sampleSize } = this.state\n    const sampleArr = Sampler.RangeSample(rangeMin, rangeMax, sampleSize)\n    this.setState({sampleArr: sampleArr})\n    this.handleForwardOne()\n  }\n\n  render() {\n\n    let renderProps = {\n      handleFocus: this.handleFocus,\n      handleBackOne: this.handleBackOne,\n      handleChangeInputsRequired: this.handleChangeInputsRequired,\n      handleDataCalculation: this.handleDataCalculation,\n      handleDataInput: this.handleDataInput,\n      handleOptionChange: this.handleOptionChange,\n      handleOptionSubmit: this.handleOptionSubmit,\n    }\n\n    return (\n      <div className=\"App\">\n        <h2>Sampler</h2>\n        <div className=\"intro\">\n          <ul>\n            <li>Generate a simple random sample from a range</li>\n            <li>Enter data for each sample</li>\n            <li>Calculate the mean</li>\n          </ul>\n        </div>\n        {\n          this.state.step === 'FormSampleOptions' && \n          <FormSampleOptions renderProps={renderProps} stateProps={this.state}/>\n        }\n        {\n          (this.state.step === 'EnterSampleData' || this.state.step === 'showCalculation') &&\n          <EnterSampleData renderProps={renderProps} stateProps={this.state}/>\n        }\n        {\n          this.state.step === 'showCalculation' && <CalculationDisplay renderProps={renderProps} stateProps={this.state} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}